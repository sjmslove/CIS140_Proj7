#!/bin/perl

## Assignment: CIS 140 Proj 7
## Author: ssmith12@student.ncmich.edu
## Version: 1.0

use 5.16.0;
use warnings;

my (@patients);
my ($numNumbers, $numPatients, $lastName, $firstName, $middleName, $age, $insurance, $ailment, $pin);


sub main {
	menu();
	if ($numNumbers == 1){
		quantity();
		dataEntry();
		displayPatients();
	}
	if ($numNumbers == 2){
		endReport();
	}

}
##first, last, middle i, DOB, insurance carrier, ailment
main ();

sub menu{
	$numNumbers =-1;
	use constant MAX_NUM => 2;
	while ($numNumbers !~ /[0-9]/ || $numNumbers > MAX_NUM || $numNumbers < 1 ){
		print "\nPlease select from the following options: \n1. Enter Patient Information  \n2.End of Day Reporting \n";
		chomp ($numNumbers = <STDIN>);
		if ($numNumbers !~ /[0-9]/ || $numNumbers > MAX_NUM || $numNumbers < 0) {
			say "Incorrect input. Please try again";
			sleep 1;
			system ("clear");
		}
	}
}
sub quantity{
	while ($numPatients !~ /[0-9]/){
		print "\nHow many patients are there today? ";
		chomp ($numPatients = <STDIN>);
		if ($numPatients !~ /[0-9]/) {
			say "Incorrect input. Please try again";
			sleep 1;
			system ("clear");
		}
	}
}
sub dataEntry{
	@patients = ();
	for (my $i = 0; $i < $numPatients; $i++){
		for (my $j = 0; $j < 6; $j++){
			if ($j = 0){ #lastname
			while ($lastName !~ /^[a-zA-Z]{2,20}$/ || !(defined $lastName) ) {
					print "\n Patient Last Name: ";
					chomp ($lastName = <STDIN>);
					if ($lastName !~ /^[a-zA-Z]{2,20}$/){
						say "Incorrect format, please try again";
						sleep 1;
						system ("clear");
					}
				}			
			} elsif ($j == 1){ #firstname
				while ($firstName !~ /^[a-zA-Z]{2,20}$/ || !(defined $firstName)) {
					print "\n Patient First Name: ";
					chomp ($firstName = <STDIN>);
					if ($firstName !~ /^[a-zA-Z]{2,20$}/){
						say "Incorrect format, please try again";
						sleep 1;
						system ("clear");
					}
				}	
			} elsif ($j == 2){
				while ($middleName !~ /^[a-zA-Z]{1}$/ || !(defined $middleName)) {
					print "\n Patient Middle Initial: ";
					chomp ($firstName = <STDIN>);
					if ($firstName !~ /^[a-zA-Z]{1}$/){
						say "Incorrect format, please try again";
						sleep 1;
						system ("clear");
					}
				}
			} elsif ($j == 3){ #age
			   my ($year, $month, $day)=0;
               use constant MINYEAR=>1900;
               use constant MAXYEAR=>2017;
               use constant MINMONTH=>1;
               use constant MAXMONTH=>12;
               use constant MINDAY=>1;
               use constant MAXDAY=>31;
               while (! $year =~ /[0-9]/ || $year < MINYEAR || $year > MAXYEAR) {
                    print "\nPlease enter patient's year of birth. ";
                    chomp ($year = <STDIN>);
                    if (! $year =~ /[0-9]/ || $year < MINYEAR || $year > MAXYEAR) {
                         print "\nIncorrect input. Please try again.\n";
                         sleep 2;
                         system ("clear");
                    }         
               }
               while (! $month =~ /[0-9]/ || $month < MINMONTH || $month > MAXMONTH) {
                    print "\nPlease enter patient's month of birth. ";
                    chomp ($month = <STDIN>);
                    if (! $month =~ /[0-9]/ || $month < MINMONTH || $month > MAXMONTH) {
                         print "\nIncorrect input. Please try again.\n";
                         sleep 2;
                         system ("clear");
                    }         
               }
               while (! $day =~ /[0-9]/ || $day < MINDAY || $day > MAXDAY) {
                    print "\nPlease enter patient's day of birth. ";
                    chomp ($day = <STDIN>);
                    if (! $day =~ /[0-9]/ || $day < MINDAY || $day > MAXDAY) {
                         print "\nIncorrect input. Please try again.\n";
                         sleep 2;
                         system ("clear");
                    } elsif ($month==1 || $month==3 || $month==5 || $month==7 || $month==8 || $month==10 || $month==12){
						use constant MAXDAY => 31;
						while (! $day =~ /[0-9]/ || $day < MINDAY || $day > MAXDAY) {
							print "\nPlease enter patient's day of birth. ";
							chomp ($day = <STDIN>);
							if (! $day =~ /[0-9]/ || $day < MINDAY || $day > MAXDAY) {
								print "\nIncorrect input. Please try again.\n";
								sleep 2;
								system ("clear");
							}
						}
					} elsif ($month==4 || $month==6 || $month==9 || $month==11){
						use constant MAXDAY =>30;
						while (! $day =~ /[0-9]/ || $day < MINDAY || $day > MAXDAY) {
							print "\nPlease enter patient's day of birth. ";
							chomp ($day = <STDIN>);
							if (! $day =~ /[0-9]/ || $day < MINDAY || $day > MAXDAY) {
								print "\nIncorrect input. Please try again.\n";
								sleep 2;
								system ("clear");
							}
						}
					} else { #Feburary with leapyears
						if (($month % 4) == 0) {  # % returns the remainder ex. 10%3 returns 1
							use constant MAXDAY => 29;
							while (! $day =~ /[0-9]/ || $day < MINDAY || $day > MAXDAY) {
								print "\nPlease enter patient's day of birth. ";
								chomp ($day = <STDIN>);
								if (! $day =~ /[0-9]/ || $day < MINDAY || $day > MAXDAY) {
									print "\nIncorrect input. Please try again.\n";
									sleep 2;
									system ("clear");
								}
							}
						} else {
							use constant MAXDAY => 28;
							while (! $day =~ /[0-9]/ || $day < MINDAY || $day > MAXDAY) {
								print "\nPlease enter patient's day of birth. ";
								chomp ($day = <STDIN>);
								if (! $day =~ /[0-9]/ || $day < MINDAY || $day > MAXDAY) {
									print "\nIncorrect input. Please try again.\n";
									sleep 2;
									system ("clear");
								}
							}
						}
					}
				}			
				calculateAge($i,$day,$month,$year);
				sub calculateAge {
					my $i = $_[0];
					my $birthDay = $_[1];
					my $birthMonth = $_[2];
					my $birthYear = $_[3];
					my $year = localtime->strftime('%Y');
					my $month = localtime->strftime('%m');
					my $day = localtime->strftime('%d');
					my $age;
					$age = $year - $birthYear;
					if ($month < $birthMonth) {
						$age = $age - 1;
					} elsif ($month == $birthMonth) {
						if ($day < $birthDay) {
							$age = $age - 1;
						}
					}
				$patients[$i][4] = $age;
				}
			} elsif ($j == 4){ #insurance
				while ($insurance !~ /^[a-zA-Z]{2,20}$/ || !(defined $insurance)) {
					print "\n What is the patient's insurance (write 'none' if patient is without): ";
					chomp ($insurance = <STDIN>);
					if ($insurance !~ /^[a-zA-Z]{2,20}$/){
						say "Incorrect format, please try again";
						sleep 1;
						system ("clear");
					}
				}	
			} elsif ($j == 5){ #ailment
				while ($ailment !~ /^[a-zA-Z]{2,400]$/ || !(defined $ailment)) {
					print "\n What is the patient being seen for? ";
					chomp ($ailment = <STDIN>);
					if ($ailment !~ /^[a-zA-Z]{2,400]$/){
						say "Incorrect format, please try again";
						sleep 1;
						system ("clear");
					}
				}	
			} else { #PIN
				int(rand);
			}
		}
	}
}

sub displayPatients{
	my $size = @patients;
	for (my $i = 0; $i < $size; $i++){
		print "\n";
		for ( my $j = 0; $j < 6; $j++){
			print "Last: $patients[$i][$0] First: $patients[$i][$1] Middle Initial: $patients[$i][$2] Age: $patients[$i][$3] Ailment: $patients[$i][$5] PIN (patient ID number): $patients[$i][$6]"
		}
	}
}

sub endReport{
	my $size = @patients;
	for (my $i = 0; $i < $size; $i++){
		if ($patients[$i][4] == "none"){
			print "\n";
			for (my $j = 0; $j < 6; $j++){
				print >> "reportsheet.csv"
			}
		}
	}
}

